GNGEO : A NeoGeo emulator for linux (and maybe some other unix)

稍微修改程式碼使得Ubuntu 22.04能正常編譯
sudo dpkg --add-architecture i386
sudo apt install gcc-multilib g++-multilib nasm  build-essential
sudo apt install libsdl1.2-dev:i386 libsdl-image1.2-dev:i386 zlib1g-dev:i386
tar xvzf gngeo-0.7.tar.gz && cd gngeo-0.7
./configure --prefix=WHERE_YOU_WANT_TO_PUT_THE_BINARIES --host=i386-linux-gnu CC="gcc -m32"
make(DO NOT USE make -j$(nproc))

REQUIREMENT : 
	SDL-1.2.x and the libz
	Opengl headers
	optional: nasm 0.98 for i386 asm optimisation
	You will also need a neogeo BIOS

INSTALLATION :
	./configure && make
	then 'make install' as root 

	The configure script will detect the presence of nasm, and
	choose the different CPU core in consequence. You can force
	the use of one cpu core with the following configure switch:
	 --enable-star
	 --enable-gen68k
	 --enable-raze
	 --enable-mamez80      

	To disable completly i386 assembler
	 --disable-i386

After this, you can start a game with the folowing command:
# gngeo /path/to/neogeo/game.zip

Usage: gngeo [OPTION]... ROMSET
Emulate the NeoGeo rom designed by ROMSET

      --autoframeskip        Enable auto frameskip
  -b, --blitter=STRING       Use the specified blitter (help for a list)
  -c, --convtile             Convert tile in internal format at loading
      --country=STRING       Set the contry to japan, usa or europe
  -D, --debug                Start with inline debuger
  -e, --effect=STRING        Use the specified effect (help for a list)
      --forcepc              Force the PC to a correct value at startup
  -f, --fullscreen           Start gngeo in fullscreen
  -h, --help                 Print this help and exit
  -H, --hwsurface            Use hardware surface for the screen
  -I, --interpolation        Merge the last frame and the current
      --joystick             Enable joystick support
  -l, --listgame             Show all the game available in the romrc
      --libglpath=STRING     Use STRING as libGL
      --overclock=N          Overclock the 68k by N%
  -P, --pal                  Use PAL timing (buggy)
      --p1key=ARRAY          Player1 Keyboard configuration
      --p2key=ARRAY          Player2 Keyboard configuration
      --p1joy=ARRAY          Player1 Joystick configuration
      --p2joy=ARRAY          Player2 Joystick configuration
      --p1joydev=N           Device index for p1joy (0 -> /dev/js0, etc.)
      --p2joydev=N           Device index for p2joy
  -r, --raster               Enable the raster interrupt
  -i, --rompath=STRING       Use STRING as rom path
  -d, --romrc=STRING         Use STRING as romrc file
      --scandir=STRING       Scan the given directory, and show available rom
      --sound                Enable sound
      --showfps              Show FPS at startup
      --sleepidle            Sleep when idle
      --screen320            Use 320x224 output screen (instead 304x224)
      --system=STRING        Set the system to home or arcade
      --scale=N              Scale the resolution by N
      --samplerate=N         Set the sample rate to N
  -t, --transpack=STRING     Use the specified transparency pack
  -v, --version              Show version and exit

All boolean options can be disabled with --no-OPTION
(Ex: --no-sound turn sound off)


CONFIGURATION :
All configuration can be done in $HOME/.gngeo/gngeorc
a sample file is provide : sample_gngeorc
Every option are also accessible on the command line.

By default, gngeo search bios and games in
$prefix/share/gngeo/ (the game must be in a zip file, the bios not)

As mame, a games is defined by a driver. All the driver are
in an unique file (by default $prefix/share/gngeo/romrc, it'll be
installed after a make install)

FRONTEND :
GGF:      The first frontend available for gngeo. It's written in Java, support
          game preview, very detailled game description and support many gngeo options.
          - License: GPL
          - Homepage: 

XGngeo:   Written in python with GTK2. Support internationalization, game preview,
          and many configuration possibility, including a key configurator.
          - License: GPL
	  - Homepage: http://choplair.tuxfamily.org/

gngeogui: A new frontend written in Perl with libgtk-perl. Support game preview, and
          nearly all the gngeo options. 
          - License: GPL
          - Homepage: 







